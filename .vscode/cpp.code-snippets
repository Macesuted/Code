{
    "Base": {
        "scope": "cpp",
        "prefix": [
            "template-Base"
        ],
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "#ifndef LOCAL",
            "#define endl '\\n'",
            "#endif",
            "",
            "bool mem1;",
            "",
            "void solve(void) { return; }",
            "",
            "bool mem2;",
            "",
            "int main() {",
            "    ios::sync_with_stdio(false), cin.tie(nullptr);",
            "#ifdef LOCAL",
            "    cerr << \"Memory Cost: \" << abs(&mem1 - &mem2) / 1024. / 1024. << \"MB\" << endl;",
            "#endif",
            "",
            "    int _ = 1;",
            "    while (_--) solve();",
            "",
            "#ifdef LOCAL",
            "    cerr << \"Time Cost: \" << clock() * 1000. / CLOCKS_PER_SEC << \"MS\" << endl;",
            "#endif",
            "    return 0;",
            "}"
        ]
    },
    "TopCoder": {
        "scope": "cpp",
        "prefix": [
            "template-TopCoder"
        ],
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "#ifdef LOCAL",
            "",
            "bool mem1;",
            "",
            "#endif",
            "",
            "#define Class ClassName",
            "#define Method MethodName",
            "",
            "class Class {",
            "   private:",
            "   public:",
            "    void Method(void) {}",
            "};",
            "",
            "#ifdef LOCAL",
            "",
            "Class _;",
            "",
            "bool mem2;",
            "",
            "int main() {",
            "    ios::sync_with_stdio(false), cin.tie(nullptr);",
            "    cerr << \"Memory Cost: \" << abs(&mem1 - &mem2) / 1024. / 1024. << \"MB\" << endl;",
            "",
            "    _.Method();",
            "",
            "    cerr << \"Time Cost: \" << clock() * 1000. / CLOCKS_PER_SEC << \"MS\" << endl;",
            "    return 0;",
            "}",
            "",
            "#endif"
        ]
    },
    "FastIO": {
        "scope": "cpp",
        "prefix": [
            "template-FastIO"
        ],
        "body": [
            "namespace IO {",
            "const int SIZE = 1 << 20;",
            "char Ibuf[SIZE], *Il = Ibuf, *Ir = Ibuf, Obuf[SIZE], *Ol = Obuf, *Or = Ol + SIZE - 1;",
            "int cache[100];",
            "void fill(void) { return Ir = (Il = Ibuf) + fread(Ibuf, 1, SIZE, stdin), void(); }",
            "void flush(void) { return fwrite(Obuf, 1, Ol - Obuf, stdout), Ol = Obuf, void(); }",
            "char getch(void) { return Il == Ir ? fill(), Il == Ir ? EOF : *Il++ : *Il++; }",
            "void putch(char x) { return *Ol++ = x, Ol == Or && (flush(), 0), void(); }",
            "template <typename T = int>",
            "T read(void) {",
            "    T x = 0, f = +1;",
            "    char c = getch();",
            "    while (c < '0' || c > '9') (c == '-') && (f = -f), c = getch();",
            "    while ('0' <= c && c <= '9') x = (x << 3) + (x << 1) + (c ^ 48), c = getch();",
            "    return x * f;",
            "}",
            "template <typename T>",
            "void write(T x) {",
            "    if (!x) return putch('0');",
            "    if (x < 0) putch('-'), x = -x;",
            "    int top = 0;",
            "    while (x) cache[top++] = x % 10, x /= 10;",
            "    while (top) putch(cache[--top] ^ 48);",
            "    return;",
            "}",
            "struct Flusher_ {",
            "    ~Flusher_() { flush(); }",
            "} io_flusher_;",
            "}  // namespace IO",
            "using IO::putch;",
            "using IO::read;",
            "using IO::write;"
        ]
    }
}